// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ToqueToqueApi.Databases;

namespace ToqueToqueApi.Migrations
{
    [DbContext(typeof(ToqueToqueContext))]
    [Migration("20200107211809_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.AllergenDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergen");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.AllergenMealDb", b =>
                {
                    b.Property<int>("AllergenId")
                        .HasColumnName("allergen_id")
                        .HasColumnType("integer");

                    b.Property<int>("MealId")
                        .HasColumnName("meal_id")
                        .HasColumnType("integer");

                    b.HasKey("AllergenId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("allergen_meal_db");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.AllergenUserDb", b =>
                {
                    b.Property<int>("AllergenId")
                        .HasColumnName("allergen_id")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("AllergenId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("allergen_user_db");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.BookingStateDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BookingState");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.BookingStateSessionUserDb", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnName("session_id")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<int>("BookingStateId")
                        .HasColumnName("booking_state_id")
                        .HasColumnType("integer");

                    b.HasKey("SessionId", "UserId");

                    b.HasIndex("BookingStateId");

                    b.HasIndex("UserId");

                    b.ToTable("booking_state_session_user_db");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.ConversationDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.ConversationUserDb", b =>
                {
                    b.Property<int>("ConversationId")
                        .HasColumnName("conversation_id")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("conversation_user_db");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.DifficultyDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Difficulty");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.GeolocationDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("SessionId")
                        .HasColumnName("session_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("Geolocation");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.MealDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<int?>("DifficultyId")
                        .HasColumnName("difficulty_id")
                        .HasColumnType("integer");

                    b.Property<string>("LinkToFullMeal")
                        .HasColumnName("link_to_full_meal")
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ParticularityId")
                        .HasColumnName("particularity_id")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Pictures")
                        .HasColumnName("pictures")
                        .HasColumnType("text[]");

                    b.Property<TimeSpan>("RealizationTime")
                        .HasColumnName("realization_time")
                        .HasColumnType("interval");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("ParticularityId");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.MessageDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ConversationId")
                        .HasColumnName("conversation_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SendingTime")
                        .HasColumnName("sending_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.ParticularityDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Particularity");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.SessionDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<int>("AvailableTickets")
                        .HasColumnName("available_tickets")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Creator")
                        .HasColumnName("creator")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventStarting")
                        .HasColumnName("event_starting")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RegisteringStop")
                        .HasColumnName("registering_stop")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.SessionMealDb", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnName("session_id")
                        .HasColumnType("integer");

                    b.Property<int>("MealId")
                        .HasColumnName("meal_id")
                        .HasColumnType("integer");

                    b.HasKey("SessionId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("session_meal_db");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.TagDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.UserDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnable")
                        .HasColumnName("is_enable")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnName("password_salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .HasColumnName("profile_picture")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.AllergenMealDb", b =>
                {
                    b.HasOne("ToqueToqueApi.Databases.Models.AllergenDb", "Allergen")
                        .WithMany("AllergenMeal")
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToqueToqueApi.Databases.Models.MealDb", "Meal")
                        .WithMany("AllergenMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.AllergenUserDb", b =>
                {
                    b.HasOne("ToqueToqueApi.Databases.Models.AllergenDb", "Allergen")
                        .WithMany("AllergenUser")
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToqueToqueApi.Databases.Models.UserDb", "User")
                        .WithMany("AllergenUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.BookingStateSessionUserDb", b =>
                {
                    b.HasOne("ToqueToqueApi.Databases.Models.BookingStateDb", "BookingState")
                        .WithMany("BookingStateSessionUser")
                        .HasForeignKey("BookingStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToqueToqueApi.Databases.Models.SessionDb", "Session")
                        .WithMany("BookingStateSessionUser")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToqueToqueApi.Databases.Models.UserDb", "User")
                        .WithMany("BookingStateSessionUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.ConversationUserDb", b =>
                {
                    b.HasOne("ToqueToqueApi.Databases.Models.ConversationDb", "Conversation")
                        .WithMany("ConversationUser")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToqueToqueApi.Databases.Models.UserDb", "User")
                        .WithMany("ConversationUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.GeolocationDb", b =>
                {
                    b.HasOne("ToqueToqueApi.Databases.Models.SessionDb", "Session")
                        .WithOne("Geolocation")
                        .HasForeignKey("ToqueToqueApi.Databases.Models.GeolocationDb", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.MealDb", b =>
                {
                    b.HasOne("ToqueToqueApi.Databases.Models.DifficultyDb", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("ToqueToqueApi.Databases.Models.ParticularityDb", "Particularity")
                        .WithMany()
                        .HasForeignKey("ParticularityId");
                });

            modelBuilder.Entity("ToqueToqueApi.Databases.Models.SessionMealDb", b =>
                {
                    b.HasOne("ToqueToqueApi.Databases.Models.MealDb", "Meal")
                        .WithMany("SessionMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToqueToqueApi.Databases.Models.SessionDb", "Session")
                        .WithMany("SessionMeals")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
